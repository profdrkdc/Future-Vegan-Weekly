# .github/workflows/weekly.yml

name: Weekly Content Generation and Deployment

on:
  schedule:
    - cron: '0 8 * * 5'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      changes_detected: ${{ steps.commit.outputs.changes_detected }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: requirements.txt

      - name: Install dependencies
        run: pip install -r requirements.txt

      # --- Stap 1: Fetch, Curate, Draft (met branch logica) ---
      - name: Generate Weekly Newsletter
        id: generate_newsletter
        env:
          AI_PROVIDER: ${{ (github.ref == 'refs/heads/main' && 'openrouter_kimi') || (github.ref == 'refs/heads/gemini-api' && 'google') || (github.ref == 'refs/heads/mistral-api' && 'openrouter_mistral') }}
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
        run: |
          python3 -m src.fetch
          python3 -m src.curate
          python3 -m src.draft

      # --- Stap 2: Select Long-Read Topic ---
      - name: Select Long-Read Topic
        id: select_topic
        # Deze stap draait alleen als de vorige succesvol was
        if: success()
        env:
          AI_PROVIDER: ${{ (github.ref == 'refs/heads/main' && 'openrouter_kimi') || (github.ref == 'refs/heads/gemini-api' && 'google') || (github.ref == 'refs/heads/mistral-api' && 'openrouter_mistral') }}
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
        run: |
          # Vang de output op in een speciale GITHUB_OUTPUT file
          echo "topic=$(python3 -m src.select_topic)" >> $GITHUB_OUTPUT

      # --- Stap 3: Generate Long-Read Article ---
      - name: Generate Long-Read Article
        id: generate_longread
        if: success() && steps.select_topic.outputs.topic != ''
        env:
          AI_PROVIDER: ${{ (github.ref == 'refs/heads/main' && 'openrouter_kimi') || (github.ref == 'refs/heads/gemini-api' && 'google') || (github.ref == 'refs/heads/mistral-api' && 'openrouter_mistral') }}
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
        run: |
          LONGREAD_FILENAME="content/longread_$(date +%Y-%m-%d)_en.md"
          python3 -m src.generate_longread "${{ steps.select_topic.outputs.topic }}" -o "$LONGREAD_FILENAME"

      # --- Stap 4: Commit and Push ---
      - name: Commit and push generated content
        id: commit
        if: success()
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore(ci): add weekly generated content"
          # Geef expliciet de map op om te controleren
          file_pattern: content/*.md

  deploy-ghost:
    if: needs.build.outputs.changes_detected == 'true'
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install dependencies
        run: pip install -r requirements.txt
      - name: Publish to Ghost
        env:
          GHOST_ADMIN_API_URL: ${{ secrets.GHOST_ADMIN_API_URL }}
          GHOST_ADMIN_API_KEY: ${{ secrets.GHOST_ADMIN_API_KEY }}
        run: python3 src/publish_ghost.py