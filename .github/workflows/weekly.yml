# .github/workflows/weekly.yml

name: Weekly Content Generation and Deployment

on:
  schedule:
    - cron: '0 8 * * 5'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      changes_detected: ${{ steps.commit.outputs.changes_detected }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: requirements.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Generate All Content (main branch)
        if: github.ref == 'refs/heads/main'
        env:
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
        run: |
          # ... (de run-stappen zijn ongewijzigd) ...
          echo "::group::Generating weekly newsletter (main branch)"
          python3 -m src.fetch
          python3 -m src.curate
          python3 -m src.draft
          echo "::endgroup::"
          echo "::group::Selecting long-read topic"
          LONGREAD_TOPIC=$(python3 -m src.select_topic)
          if [ -z "$LONGREAD_TOPIC" ]; then
            echo "::error::Failed to select a topic. Exiting."
            exit 1
          fi
          echo "Selected topic: $LONGREAD_TOPIC"
          echo "::endgroup::"
          echo "::group::Generating long-read article"
          LONGREAD_FILENAME="content/longread_$(date +%Y-%m-%d)_en.md"
          python3 -m src.generate_longread "$LONGREAD_TOPIC" -o "$LONGREAD_FILENAME"
          echo "::endgroup::"

      - name: Generate All Content (gemini-api branch)
        if: github.ref == 'refs/heads/gemini-api'
        env:
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
        run: |
          # ... (de run-stappen zijn ongewijzigd) ...
          echo "::group::Generating weekly newsletter (gemini-api branch)"
          python3 -m src.fetch
          python3 -m src.curate
          python3 -m src.draft
          echo "::endgroup::"
          echo "::group::Selecting long-read topic"
          LONGREAD_TOPIC=$(python3 -m src.select_topic)
          if [ -z "$LONGREAD_TOPIC" ]; then
            echo "::error::Failed to select a topic. Exiting."
            exit 1
          fi
          echo "Selected topic: $LONGREAD_TOPIC"
          echo "::endgroup::"
          echo "::group::Generating long-read article"
          LONGREAD_FILENAME="content/longread_$(date +%Y-%m-%d)_en.md"
          python3 -m src.generate_longread "$LONGREAD_TOPIC" -o "$LONGREAD_FILENAME"
          echo "::endgroup::"

      - name: Commit and push generated content
        id: commit # Geef deze stap een ID
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore(ci): add weekly generated content"
          # Andere opties zijn niet strikt nodig, de defaults zijn goed

  deploy-ghost:
    # Draai deze job alleen als de vorige job daadwerkelijk iets heeft gecommit
    if: needs.build.outputs.changes_detected == 'true'
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        # Deze stap is nu cruciaal: het checkt de *nieuwe* staat van de repo uit,
        # inclusief de commit die zojuist is gemaakt.
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: requirements.txt

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Publish to Ghost
        env:
          GHOST_ADMIN_API_URL: ${{ secrets.GHOST_ADMIN_API_URL }}
          GHOST_ADMIN_API_KEY: ${{ secrets.GHOST_ADMIN_API_KEY }}
        run: python3 src/publish_ghost.py