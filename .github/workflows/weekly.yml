# .github/workflows/weekly.yml

name: Weekly Content Generation and Deployment

on:
  schedule:
    - cron: '0 8 * * 5'
  workflow_dispatch:
    inputs:
      archive_content:
        description: 'Archive old content before running?'
        required: true
        default: 'true'
        type: choice
        options: [ 'true', 'false' ]
      custom_date:
        description: 'Run for a specific date (YYYY-MM-DD) or "today"'
        required: true
        default: 'today'
        type: string

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      changes_detected: ${{ steps.commit.outputs.changes_detected }}
      # --- FIX 1: Geef de commit hash door als output ---
      commit_hash: ${{ steps.commit.outputs.commit_hash }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: requirements.txt

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run Full Content Pipeline
        env:
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
          FORCED_PROVIDER: ${{ github.event.inputs.force_provider || 'auto' }} # Gebruik 'auto' als default voor geplande runs
        run: |
          ARCHIVE_FLAG=""
          if [[ "${{ github.event.inputs.archive_content }}" == "false" ]]; then
            ARCHIVE_FLAG="--no-archive"
          fi
          DATE_FLAG=""
          if [[ "${{ github.event.inputs.custom_date }}" != "today" ]]; then
            DATE_FLAG="--date ${{ github.event.inputs.custom_date }}"
          fi
          python3 -m src.run_pipeline $ARCHIVE_FLAG $DATE_FLAG

      - name: Commit and push generated content
        id: commit
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore(ci): add weekly generated content"

  deploy-ghost:
    if: needs.build.outputs.changes_detected == 'true'
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # --- FIX 2: Check de exacte commit uit, niet de branch ---
          ref: ${{ needs.build.outputs.commit_hash }}

      - name: Install dependencies
        run: pip install -r requirements.txt
        
      - name: Publish to Ghost
        env:
          GHOST_ADMIN_API_URL: ${{ secrets.GHOST_ADMIN_API_URL }}
          GHOST_ADMIN_API_KEY: ${{ secrets.GHOST_ADMIN_API_KEY }}
        run: python3 src/publish_ghost.py