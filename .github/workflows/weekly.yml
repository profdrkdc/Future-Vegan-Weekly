# .github/workflows/weekly.yml

name: Weekly Content Pipeline

on:
  # Maakt handmatige activatie mogelijk via de Actions tab
  workflow_dispatch:
    inputs:
      date:
        description: 'Run for a specific date (YYYY-MM-DD)'
        required: false
      no_archive:
        description: 'Skip archiving old content (true/false)'
        required: false
        default: 'false'

  # Geplande wekelijkse uitvoering, elke maandag om 08:00 UTC
  schedule:
    - cron: '0 8 * * 1'

jobs:
  build_and_publish:
    runs-on: ubuntu-latest
    
    # Voorkom dubbele uitvoeringen op dezelfde commit
    concurrency: 
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: Checkout repository code
        uses: actions/checkout@v4
        with:
          # We hebben een token nodig met write-permissies om terug te kunnen pushen
          token: ${{ secrets.GH_PAT_TOKEN }}

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip3 install -r requirements.txt

      - name: Configure Git
        run: |
          git config --global user.name 'GitHub Actions Bot'
          git config --global user.email 'actions-bot@users.noreply.github.com'

      - name: Run Full Content Pipeline
        env:
          # De API-sleutels worden nu direct doorgegeven.
          # De PREFERRED_PROVIDER variabele is verwijderd.
          KIMI_API_KEY: ${{ secrets.KIMI_API_KEY }}
          MISTRAL_API_KEY: ${{ secrets.MISTRAL_API_KEY }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          GHOST_ADMIN_API_URL: ${{ secrets.GHOST_ADMIN_API_URL }}
          GHOST_ADMIN_API_KEY: ${{ secrets.GHOST_ADMIN_API_KEY }}
        run: |
          # Bepaal de argumenten op basis van de workflow input
          ARGS=""
          if [ "${{ github.event.inputs.date }}" != "" ]; then
            ARGS="$ARGS --date ${{ github.event.inputs.date }}"
          fi
          if [ "${{ github.event.inputs.no_archive }}" == "true" ]; then
            ARGS="$ARGS --no_archive"
          fi
          
          # Voer de pipeline uit met de samengestelde argumenten
          python3 -m src.run_pipeline $ARGS

      - name: Commit and Push Generated Content
        run: |
          # Controleer of er wijzigingen zijn in de 'content' map of de .json bestanden
          if ! git diff --quiet --exit-code -- content/ raw.json curated.json; then
            echo "Wijzigingen gedetecteerd, bezig met committen en pushen..."
            git add content/*.md raw.json curated.json archive/*.md
            # Maak een commit message met de datum
            COMMIT_DATE=$(date -u +"%Y-%m-%d")
            git commit -m "docs: Generate content for ${COMMIT_DATE}"
            git push origin main
          else
            echo "Geen wijzigingen om te committen."
          fi